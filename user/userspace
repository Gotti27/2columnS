#!/bin/python3

import socket
import struct
import threading

import time
import logging
from systemd.journal import JournalHandler


import pandas
import joblib

import json


def mean(l):
    if len(l) == 0:
        return 0
    return round(sum(l)/len(l), 2)


def parse_window(window):
    d = []

    connections = [] 
    packets_per_conn = {}
    
    for w in window:
        c = (w[0],w[2],w[1],w[3])
        if c not in connections:
            connections.append(c)
            packets_per_conn[c] = 0

        packets_per_conn[c] += 1

    sources = list(set([c[0] for c in connections]))

    d.append(len(window))
    d.append(len(connections))
    d.append(mean([len(list(filter(lambda c: c[0] == s, connections))) for s in sources]))
    
    # macs = list(set([(w[4], w[0]) for w in window]))
    # print(macs)
    # d.append( max(  same_mac.values() ) if len(macs.values()) > 0 else 0)

    establishing = list(set(map(lambda e: (e[0],e[2],e[1],e[3]), list(filter(lambda w: w[-3] == 1, window)))))

    d.append(len(establishing))
    # d.append(len(connections) - len(establishing))
    d.append(mean(list(map(lambda w: w[-4], window))))
    
    """
    for c in connections:

    for w in window:
        c = (w[0],w[2],w[1],w[3])
    
    """

    d.append(mean(packets_per_conn.values()))

    return d



log = logging.getLogger('2columnS')
log.addHandler(JournalHandler())
log.setLevel(logging.INFO)

model = joblib.load('svm_model.pkl')



NETLINK_MYGROUP = 2

sock = socket.socket(socket.AF_NETLINK, socket.SOCK_RAW, socket.NETLINK_USERSOCK)

sock.bind((0, NETLINK_MYGROUP))

log.info("Sending msg")

msg_data = b"Netlink connection established\x00"
msg_len = 16 + len(msg_data)


msg = msg_len.to_bytes(4, 'little') + b"\x03\x00" + b"\x00"*2 + b"\x00"*4 + b"\xb3\x15\x00\x00" + b"Netlink connection established\x00"

sock.send(msg)

log.info("sending rules to kernel module")


def send_msg_to_kernel(msg, rule: bool):
    rule_data = b''
    if rule:
        source = msg['source'].encode().ljust(16, b'\x00')  
        #diff = 16 - len(source)
        #source += b'\x00' * diff
        destination = msg['destination'].encode().ljust(16, b'\x00')
        #diff = 16 - len(destination)
        #destination += b'\x00' * diff
        port = msg['port'].to_bytes(2, 'little')
        protocol = msg['protocol'].to_bytes(1, 'little')                                                    
        action = msg['action'].to_bytes(1, 'little') 
                                                                   
        rule_data = b'RULE:1' + source + destination + port + protocol + action
        log.info(rule_data)
    else:
        rule_data = f"RULE:0{msg}".encode()

    rule_len = 16 + len(rule_data)
    rule_msg = rule_len.to_bytes(4, 'little') + b"\x03\x00" + b"\x00"*2 + b"\x00"*4 + b"\xb3\x15\x00\x00" + rule_data 

    sock.send(rule_msg)

with open('rules.json', "r") as rules_file:
    rules = json.loads(rules_file.read())

    if rules['lock'].lower() == 'true':
        send_msg_to_kernel("LOCK", False)
        log.info("--- IN networking locked ---")
    elif rules['lock'].lower() == 'false':
        send_msg_to_kernel("UNLOCK", False)
        log.info("--- IN networking unlocked ---")
    else:
        raise Exception("lock policy not valid, use 'true' or 'false'")

    for i in rules['rules']:
        send_msg_to_kernel(i, True) 
        log.info(f"rule {i} dispatched")
   
    default_policy = rules['default']
    send_msg_to_kernel(f'DEFAULT-{default_policy}', False)

log.info("Starting reciving.....")

window = []

def check_older(older, newer):
    # return false if older is more than 1 minute older than newer
    return older[-1] >= newer[-1] - 60e9

def classify(window):
    if len(window) == 0:
        return
    last = window[-1]
    window = list(filter(lambda p: check_older(p, last), window))
    flow = parse_window(window)

    score = model.score_samples([flow])

    # prediction = "Anomaly" else "Normal"
    if score > 2000:
        log.info(f"prediction: {score} - Anomaly detected")
    
#    if model.predict([flow])[0] == -1:
#       log = logging.getLogger('2columnS')
#      log.addHandler(JournalHandler())
#     log.setLevel(logging.INFO)
#    log.info("Anomaly Detected")


classifier = threading.Thread(target=classify, args=(window,), daemon=True) 
classifier.start()

while True:
    data = ''
    try:
        data = sock.recvmsg(1024)[0]
    except OSError:
        log = logging.getLogger('2columnS')
        log.addHandler(JournalHandler())
        log.setLevel(logging.INFO)
        log.info("Anomaly detected")
        continue

    msg_hdr = data[:16]
    
    msg_len, msg_type, flags, seq, pid = struct.unpack("=LHHLL", msg_hdr)
    msg_data = data[16:msg_len].strip(b'\x00').decode()

    p = msg_data.split(',')    

    p[2] = float(p[2])
    p[3] = float(p[3])
    p[6]= float(p[6])
    p[7]= float(p[7])
    p[8]= float(p[8])
    p[9]= float(p[9])
    p[10]= float(p[10])

    window.append(p)

    if not classifier.is_alive():
        classifier = threading.Thread(target=classify, args=(window,), daemon=True) 
        classifier.start()

